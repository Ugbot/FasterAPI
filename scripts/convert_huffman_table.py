#!/usr/bin/env python3
"""
Convert nghttp2's Huffman decode table to modern C++ format.

Reads: external/nghttp2/lib/nghttp2_hd_huffman_data.c
Writes: src/cpp/http/huffman_table_data.cpp
"""

import re
import sys

def parse_nghttp2_table(filepath):
    """Parse nghttp2's decode table from C file."""
    with open(filepath, 'r') as f:
        content = f.read()

    # Find the decode table
    match = re.search(
        r'const nghttp2_huff_decode huff_decode_table\[\]\[16\] = \{(.*?)\};',
        content,
        re.DOTALL
    )

    if not match:
        print("ERROR: Could not find huff_decode_table", file=sys.stderr)
        return None

    table_content = match.group(1)

    # Parse each state by looking for state comments and their brace blocks
    states = []

    # Split into state blocks: /* N */ { ... },
    # Use a more flexible pattern that handles nested braces
    lines = table_content.split('\n')
    current_state = None
    current_entries = []
    in_state_block = False

    for line in lines:
        # Check for state comment
        state_comment = re.search(r'/\*\s*(\d+)\s*\*/', line)
        if state_comment:
            # Save previous state if we have one
            if current_state is not None:
                if len(current_entries) != 16:
                    print(f"WARNING: State {current_state} has {len(current_entries)} entries (expected 16)", file=sys.stderr)
                states.append((current_state, current_entries))

            current_state = int(state_comment.group(1))
            current_entries = []
            in_state_block = False
            continue

        # Check for opening brace
        if '{' in line and not in_state_block:
            in_state_block = True

        # Parse entries in this line
        if in_state_block:
            # Find all {0xXXXX, YY} patterns
            for entry_match in re.finditer(r'\{(0x[0-9a-fA-F]+),\s*(\d+)\}', line):
                state_and_flags = int(entry_match.group(1), 16)
                symbol = int(entry_match.group(2))
                current_entries.append((state_and_flags, symbol))

        # Check for closing brace
        if '}' in line and in_state_block:
            # Count braces to handle nested closing
            if line.strip() in ['},', '}']:
                in_state_block = False

    # Save last state
    if current_state is not None:
        if len(current_entries) != 16:
            print(f"WARNING: State {current_state} has {len(current_entries)} entries (expected 16)", file=sys.stderr)
        states.append((current_state, current_entries))

    return states

def generate_cpp_table(states, output_path):
    """Generate modern C++ decode table."""

    with open(output_path, 'w') as f:
        f.write("""// Auto-generated Huffman decode table from nghttp2
// DO NOT EDIT - generated by scripts/convert_huffman_table.py

#include "huffman.h"

namespace fasterapi {
namespace http {

// Huffman decode table: 257 states x 16 nibbles
// Based on nghttp2_hd_huffman_data.c
const HuffmanDecoder::DecodeEntry HuffmanDecoder::decode_table_[DECODE_TABLE_STATES][DECODE_TABLE_NIBBLES] = {
""")

        for state_num, entries in states:
            f.write(f"  // State {state_num}\n")
            f.write("  {\n")

            for i, (state_and_flags, symbol) in enumerate(entries):
                f.write(f"    {{{state_and_flags:#06x}, {symbol:3d}}}")
                if i < len(entries) - 1:
                    f.write(",")
                f.write("\n")

            f.write("  }")
            if state_num < len(states) - 1:
                f.write(",")
            f.write("\n")

        f.write("""};

} // namespace http
} // namespace fasterapi
""")

def main():
    import os

    # Paths relative to project root
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    input_path = os.path.join(project_root, 'external/nghttp2/lib/nghttp2_hd_huffman_data.c')
    output_path = os.path.join(project_root, 'src/cpp/http/huffman_table_data.cpp')

    print(f"Reading nghttp2 table from: {input_path}")
    states = parse_nghttp2_table(input_path)

    if states is None:
        return 1

    print(f"Parsed {len(states)} states")

    print(f"Writing C++ table to: {output_path}")
    generate_cpp_table(states, output_path)

    print("Done!")
    return 0

if __name__ == '__main__':
    sys.exit(main())
